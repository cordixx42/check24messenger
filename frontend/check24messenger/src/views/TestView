export const NotFound = ({}) => {
  console.log("in test");
  return <h1>USER NOT FOUND</h1>;
};

// not go through router but directly child component
export const SingleChatChild = ({ convId, userType, messages }) => {
  const conv = convId;
  //consider saving in localstorage
  const user = userType;

  console.log("message");
  console.log(messages);

  return (
    <>
      <h1>
        This should be overview of one single chat with convId
        {conv} and type {user}
      </h1>

      {messages &&
        messages.map((mess) => {
          <li>{mess.text}</li>;
        })}
    </>
  );
};

//this works -> base case
export const StaticChat = ({ messages }) => {
  console.log("heyy static");
  console.log(messages);
  return <>{messages && messages.map((mess) => <li>{mess.text}</li>)};</>;
};

// experimenting with differnet methods of rendering chat view
export const ChatOverviewChild = () => {
  const navigate = useNavigate();

  const { userinfo } = useParams();
  const userName = userinfo.slice(0, userinfo.length - 1);
  // 0 -> customer, 1 -> service-provider
  const userType = parseInt(userinfo.at(userinfo.length - 1));

  const [conversations, setConversations] = useState([]);

  const [messages, setMessages] = useState([]);

  // conversation id
  const [currentConv, setCurrentConv] = useState(0);

  useEffect(() => {
    fetch(
      "http://localhost:3001/conversations/?name=" +
        userName +
        "&type=" +
        userType
    )
      .then((res) => res.json())
      .then((data) => {
        setConversations(data);
        console.log(data);
        console.log(conversations);
      });
  }, []);

  useEffect(() => {
    currentConv != 0 &&
      fetch("http://localhost:3001/messages/?convId=" + currentConv)
        .then((res) => res.json())
        .then((data) => {
          setMessages(data);
          console.log(data);
          console.log(messages);
        });
  }, [currentConv]);

  const handleConversation = (providerName, convId) => {
    console.log(providerName);
    //setCurrentConv(convId);
    navigate("/" + userinfo + "/" + convId + "." + userType);
  };

  const handleDefault = () => {
    navigate("/" + userinfo + "/default");
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    //navigate("/chat");
  };

  return (
    <>
      <h1>
        current user "{userinfo}" with name "{userName}" and type "{userType}"
      </h1>

      <Row>
        <ConversationBar>
          <ProfileButton onClick={handleDefault}>Profile</ProfileButton>
          <h1>Conversations go here</h1>
          {conversations &&
            conversations.map((conv) => (
              <ConversationBox
                key="{conv.id}"
                onClick={() =>
                  handleConversation(conv.service_provider_name, conv.id)
                }
              >
                {conv.service_provider_name}
              </ConversationBox>
            ))}
        </ConversationBar>
        <DetailedChatArea>
          <Outlet />

          {/* <SingleChatChild
              convId={currentConv}
              userType={userType}
              messages={messages}
              // setMessages={setMessages}
            /> */}
          {/* {messages &&
              messages.map((mess) => (
                <ConversationBox>{mess.text}</ConversationBox>
              ))} */}
          {/* <StaticChat messages={messages} /> */}
        </DetailedChatArea>
      </Row>
    </>
  );
};
